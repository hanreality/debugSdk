plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdk 29

    defaultConfig {
        applicationId "com.melot.android.lib.debugsdk"
        minSdk 19
        targetSdk 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation "androidx.multidex:multidex:2.0.1"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    implementation project(':debug_sdk')
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    debugImplementation 'io.github.didi.dokit:dokitx:3.5.0.1'
    releaseImplementation 'io.github.didi.dokit:dokitx-no-op:3.5.0.1'
    implementation 'com.melot.android:kksp:1.0.6'
    implementation 'com.tencent:mmkv-static:1.2.8'
    implementation project(':localRepo:baseView')
}

project.tasks.each { task ->
    if (task.name.startsWith('package') && task.name.endsWith('Release')) {
         printf(task.name)
    }
}

task insertBuildInfo() {
    doLast {
        if (!isReleaseBuildType()) {
            File assertFile = file(rootDir.path + "/app/src/main/assets")
            if (!assertFile.exists()) {
                assertFile.mkdirs()
            }
            File file = file(assertFile.path + "/build-info.json")
            if (file.exists()) {
                file.delete()
            } else {
                file.createNewFile()
            }
            String content = "{\"build_time\": \"" + releaseTime() + "\"}\n"
            file.write(content)
        }
    }
}

boolean isReleaseBuildType() {
    for (String s: gradle.startParameter.taskNames) {
        if (s.contains("Release") | s.contains("release")) {
            return true
        }
    }
    return false
}

def releaseTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone("GMT+08:00"))
}